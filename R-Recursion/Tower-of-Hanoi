/*Tower Of Hanoi
Tower of Hanoi puzzle with n disks can be solved in minimum 2n−1 steps. This presentation shows that a puzzle with 3 disks has taken 23 - 1 = 7 steps.

Algorithm
To write an algorithm for Tower of Hanoi, first we need to learn how to solve this problem with lesser amount of disks, say → 1 or 2. We 
mark three towers with name, source, destination and aux (only to help moving the disks). If we have only one disk, then it can easily be moved from source
to destination peg.

If we have 2 disks −

First, we move the smaller (top) disk to aux peg.
Then, we move the larger (bottom) disk to destination peg.
And finally, we move the smaller disk from aux to destination peg.

Tower Of Hanoi with Two Disks
So now, we are in a position to design an algorithm for Tower of Hanoi with more than two disks. We divide the stack of disks in two parts.
The largest disk (nth disk) is in one part and all other (n-1) disks are in the second part.

Our ultimate aim is to move disk n from source to destination and then put all other (n1) disks onto it. We can imagine to apply the same in a recursive way
for all given set of disks.

The steps to follow are −

Step 1 − Move n-1 disks from source to aux
Step 2 − Move nth disk from source to dest
Step 3 − Move n-1 disks from aux to dest*/


//important libraries
#include <bits/stdc++.h>
using namespace std;

 /*declaring  function TOH(n-->no of disks,src-->source from where the disk will move,helper-->help in moving disk from source to destination,
    dest-->destination where disk will go)  of returning type void(it returns nothing just prints the output*/
  
  void TOH(int n,char src,char helper,char dest)
{
    if(n==0)
    {  //no disks left 
       return;
    }
     
     //if disks are more than zero
    
    TOH(n-1,src,dest,helper);                                                                     //calling function recursily with n-1(toal disks-1)
     cout<<"Disk "<<n<<" is moved from "<<src<<" to "<<dest<<endl;                                 //printing the output
     TOH(n-1,helper,src,dest);                                                                    // again calling funtion recursively with n-1(toal disks-1)
}

// time compexity-->O(2^n)-->exponential time taking problem

int main()
{
    
   //printing-->enter number of disks.
   
   cout<<<<endl<<"Enter number of disks."<<endl;
   
    int n;   //declaring a variable n-->total number of disks
    cin>>n;//total disks   //taking input
    TOH(n,'A','B','C');     //calling function TOH() with three arguments(n->no if disk,A->source,B->helper,C->dest)

    return 0;
}
